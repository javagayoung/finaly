<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags"%>

<style>
/* 닫기 버튼 스타일 */
.close {
	color: #aaa;
	float: right;
	width: 10%;
	font-size: 28px;
	font-weight: bold;
}

.close:hover, .close:focus {
	color: black;
	text-decoration: none;
	cursor: pointer;
}

/* 풀캘린더 스타일 */
.cal {
	width: 50%;
	min-height: 500px;
	margin: 20px 50px;
}

#calendar2 {
	width: 500px;
	margin-left: 20px;
}

.date-group {
	display: inline-block;
	margin-right : 30px;
}

</style>

<script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.10/index.global.min.js'></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"></script>
<!-- sweetalert -->
<script src="/resources/fullcalendar-6.1.10/sweetalert2.min.js"></script>
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>

<!-- 풀캘린더 -->
<div id="calendar1" class="cal"></div>
<div id="calendar2" class="cal"></div>

<!-- 일정 추가 모달    -->
<c:import url="../common/modal.jsp"></c:import>

<script>
// 날짜 선택 제한
// 현재 날짜 불러와서 문자 형태 맞추기
const date = new Date();
const year = date.getFullYear();
const month = ('0' + (date.getMonth() + 1)).slice(-2);
const day = ('0' + (date.getDate())).slice(-2);
const today = year+"-"+month+"-"+day;
// 현재 날짜 이전으로는 선택 불가
$("#eventStart").attr("min", today);
$("#eventEnd").attr("min", today);

let start = $("#eventStart").val();
let startTime = $("#start").val();
let end = $("#eventEnd").val();
var endTime = $("#end").val();
let content = $("#eventContent").val();
let color = $("#color").val();
// 종일 여부
let isAllDay = $('input[name="allDay"]:checked').val();
let schEmpNo = "${employeeVO.empNo}"; // SessionInfo
let dsCate = $("#color option:selected").text();

//month 달력 특정
let calendarEl = $("#calendar1")[0];
let calendar1;

//today 달력 특정
let calendarE2 = $("#calendar2")[0];
let calendar2;

	document.addEventListener('DOMContentLoaded', function() {
		calendar1 = new FullCalendar.Calendar(calendarEl, {
			// 한국어 설정
			locale : 'ko',
			// 화면에 맞게 높이 재설정
			expandRows : true,
			// 이벤트가 오버되면 높이 제한 (+ 몇 개식으로 표현)
			dayMaxEvents: true,
			// 초기 로드 될때 보이는 캘린더 화면(기본 설정: 달)
			initialView : 'dayGridMonth',
			// 날짜를 클릭하면 해당 날짜 일정 추가 모달 뜨기
			dateClick : function(info) {
				console.log(info.dateStr); // 2023-12-07
				$("#createSchModal").modal("show");
				selectedStart = info.dateStr;
				$("#eventStart").val(selectedStart);
			},
			// 드래그해서 수정 가능
			editable: true,
			eventDrop: function(info) {
			    alert(info.event.title + " was dropped on " + info.event.start.toISOString());

			    if (!confirm("Are you sure about this change?")) {
			      info.revert();
			    }
			  },
			// 일정 클릭 시 발생할 이벤트
			eventClick: function(info) {
				alert("일정 클릭 시 발생할 이벤트");
				//클릭한 일정 Id
				//var id = info.event._def.defId;
			},
			// 날짜를 선택하면 Day 캘린더나 Week 캘린더로 링크
			navLinks : false,
			// +more 표시 전 최대 이벤트 갯수, true는 셀 높이에 의해 결정
			dayMaxEvents: true,
			// 버튼 만들기
			customButtons : {
				calButton : {
					text : "캘린더",
					click : function() {
						calendar1.refetchEvents();
					}
				},
				saveEvent : {
					text : "일정 추가 +",
					click : function() {
						// 모달 열기
						$("#createSchModal").modal("show"); 
					}
				}
			},
			// 해더에 표시할 툴바
			headerToolbar : {
				left : 'calButton prev,next',
				center : 'title',
				right : 'saveEvent'
			},

			// 캘린더에서 드래그로 이벤트를 생성
			select : function(arg) {
				let title = prompt('Event Title:');
				if (title) {
					calendar1.addEvent({
						title : title,
						start : arg.start,
						end : arg.end,
						allDay : arg.allDay
					})
				}
				calendar1.unselect();
			}
			
		// 이벤트
		});
		calendar1.render();
		
		calendar2 = new FullCalendar.Calendar(calendarE2, {
			// 한국어 설정
			locale : 'ko',
			// 초기 로드 될때 보이는 캘린더 화면(기본 설정: 달)
			initialView : 'timeGridDay',
			// Day 캘린더에서 시작 시간
			slotMinTime : '09:00',
			// Day 캘린더에서 종료 시간
			slotMaxTime : '20:00',
			// 현재 시간 마크
			nowIndicator : true,
			// 해더에 표시할 툴바
			headerToolbar : {
				left : 'prev,next',
				center : 'title',
				right : 'today'
			}
		});
		calendar2.render();

		console.log(year);
		console.log(month);
		const dbMonth = date.getMonth()+1;
		// 달력 로딩
		let data2 = { year : year };
		
		$.ajax({
			url:"/calendar/schList",
			type:"post",
			data: data2,
			dataType: "JSON",
			async: false,
			beforeSend:function(xhr){
				xhr.setRequestHeader("${_csrf.headerName}","${_csrf.token}");
			},
			success : function(data, status, xhr){
				$.each(data, function(key, value){
					console.log(key);
					console.log(value);
				});
				
				start = data[0].dsStrDate;
				end = data[0].dsEndDate;
				content = data[0].dsCont;
				dbCate = data[0].dsCate; // if => color
				isAllDay = data[0].dsAd; // if => allDay
				
				let eventData = {
				    start: start,
				    end: end,
				    title: content,
				    color: color,
				 	// 종일 여부에 따라 true 또는 false 설정
				    allDay: (isAllDay === 'true'),
				};
				
				// month 달력에 이벤트 추가
				calendar1.addEvent(eventData);
				calendar1.render();
				
				console.log(eventData);
				
				//today 달력에 이벤트 추가
				var endTime = $('#end').val();
				
				calendar2.addEvent(eventData);
				calendar2.render();
				
			}, error : function(xhr, status, error){
			  Swal.fire({
				   	title: '데이터 로딩 실패',
				   	text: '새로고침 해주세요.',
				   	icon: 'error',
				   	confirmButtonColor: '#0ABAB5',
				   	confirmButtonText: '확인',
				})
				return;
		  }
		});
		
		
		const empDeptCd = "${employeeVO.authorityVOList[0]}";
		console.log(data2);
<%-- 		if('<%=sessionId%>' == null){ --%>
// 			alert("일정 변경 권한 없음");
// 			location.href='/calendar/full';
// 		}
		
		
	});
	
	//빈 값 입력 시 오류
	function nullCheck() {
		if (start == "" || startTime == "" || end == "" || endTime == "" || content == "") {
			Swal.fire({
			   	title: '입력 오류',
			   	text: '입력이 부족합니다. 모든 항목을 입력해주세요.',
			   	icon: 'error',
			   	confirmButtonColor: '#0ABAB5',
			   	confirmButtonText: '확인',
			})
			return;
		} else {
			modalSave();
		}
	}
	
	// 모달칸 비우기
	function initModal(){
		$("#eventStart").val("");
		$("#start").val('09:00');
		$("#eventEnd").val("");
		$("#end").val('09:30');
		$("#eventContent").val("");
		$("#color").val("blue");
		$("#createSchModal").css("display", "none");
	}

	
	// 모달창 입력값 확인
	function modalSave(){
		start = $("#eventStart").val();
		startTime = $("#start").val();
		end = $("#eventEnd").val();
		endTime = $("#end").val();
		content = $("#eventContent").val();
		color = $("#color").val();
		dsCate = $("#color option:selected").text();
		isAllDay = $('input[name="allDay"]:checked').val();
		
		let eventData = {
		    start: start + 'T' + startTime,
		    end: end + 'T' + endTime,
		    title: content,
		    color: color,
		 	// 종일 여부에 따라 true 또는 false 설정
		    allDay: (isAllDay === 'true'),
		};
		
		console.log(eventData);
		
		// 빈 값 입력 시 오류
		if (eventData.title == "" || eventData.start == "" || eventData.end == "") {
			Swal.fire({
			   	title: '입력 오류',
			   	text: '입력이 부족합니다. 모든 항목을 입력해주세요.',
			   	icon: 'error',
			   	confirmButtonColor: '#0ABAB5',
			   	confirmButtonText: '확인',
			})
			return;
			
			} else {
			   // month 달력에 이벤트 추가
			   calendar1.addEvent(eventData);
			   calendar1.render();
			   
			   console.log(eventData);
			   
			   //today 달력에 이벤트 추가
			   var endTime = $('#end').val();
			   
			   calendar2.addEvent(eventData);
			   calendar2.render();
			   
				// DB 저장
			 	// 오라클 boolean 안됨.. 종일 여부에 따라 1 또는 0 설정
				if(isAllDay === 'true'){
					isAllDay = 1;
				} else {
					isAllDay = 0;
				}
			   
			   let data = {
					dsStrDate: start + 'T' + startTime,
					dsEndDate: end + 'T' + endTime,
					dsCont: content,
					dsCate: dsCate,
				    dsAd: isAllDay,
				    empNo: empNo
				};

			   initModal();
		
		
		   console.log("data =>",data);
		   
			$.ajax({
				url: "/calendar/createSch",
				contentType:"application/json;charset=utf-8",
				data: JSON.stringify(data),
				type: "post",
				dataType:"json",
				async: false,
				beforeSend:function(xhr){
					xhr.setRequestHeader("${_csrf.headerName}","${_csrf.token}");
				},
				success: function(res){
					console.log(res);
					
					if(res.result === 'success'){
						Swal.fire({
					    	title: '일정 등록 성공!',
					    	text: '역쉬~!bbb',
					    	icon: 'success',
					    	confirmButtonColor: '#0ABAB5',
					    	confirmButtonText: '확인',
						})
					}
					
					$("#createSchModal").modal("hide");
				},
				error : function(xhr, status, error){
				 Swal.fire({
				    	title: '일정 등록 실패!',
				    	text: '재시도 해주세요.',
				    	icon: 'error',
				    	confirmButtonColor: '#0ABAB5',
				    	confirmButtonText: '확인',
					})
					$("#createSchModal").modal("hide"); 
				}
			});
		}
	}
	
	
	
	// 시작일 전으로 종료일 체크 방지
	function dayCheck() {
		let start = $("#eventStart").val();
		let end = $("#eventEnd").val();
		
		if (end != '' && start > end) {
		   //끝나는 날짜가 시작하는 날짜보다 값이 크면 안됨
		   Swal.fire({
				title: '날짜 설정 오류',
				text: '시작보다 이전 날짜로 설정할 수 없습니다.',
			   	icon: 'error',
			   	confirmButtonColor: '#0ABAB5',
			   	confirmButtonText: '확인',
			})
		// 시작일로 변경
		$('#eventEnd').val(start);
		return;
		}
	}
	
	// 선택 시간따라 30분 뒤 값 설정	
	function timeSet() {
		let start = $("#start").val();
		let end = $("#end").val();
		
		if(start.substring(3, 5) == '00') // 19:00
			end = start.substring(0, 2) + ':30';
		else
			end = (parseInt(start.substring(0, 2))+1) + ':00';
		// 선택지에 30분 뒤 값 적용
		$('#end').val(end);
	}
	
	// 시작 시간 전으로 종료 시간 체크 방지
	function timeCheck() {
		let eventStart = $("#eventStart").val();
		let eventEnd = $("#eventEnd").val();
		let start = $("#start").val();
		let end = $("#end").val();
		// 종료가 시작보다 빠른 시간이면
		if( eventStart > eventEnd && end <= start) {
			Swal.fire({
			   	title: '시간 설정 오류',
			   	text: '시작보다 이전 시간으로 설정할 수 없습니다.',
			   	icon: 'error',
			   	confirmButtonColor: '#0ABAB5',
			   	confirmButtonText: '확인',
			})
			if(start.substring(3, 5) == '00') // 19:00
				end = start.substring(0, 2) + ':30';
			else
				end = (parseInt(start.substring(0, 2))+1) + ':00';
			// 선택지에 30분 뒤 값 적용
			$('#end').val(end);
			return;
		}
	}
	
	// 일정 삭제
	function deleteSch() {
		$.ajax({
			url: "/calendar/deleteSch",
			contentType:"application/json;charset=utf-8",
			data: JSON.stringify(data),
			type: "post",
			dataType:"json",
			beforeSend:function(xhr){
				xhr.setRequestHeader("${_csrf.headerName}","${_csrf.token}");
			},
			success: function(res){
				if(res.result === 'success'){
					Swal.fire({
				    	title: '일정 삭제 성공!',
				    	text: '역쉬~!bbb',
				    	icon: 'success',
				    	confirmButtonColor: '#0ABAB5',
				    	confirmButtonText: '확인',
					})
				}
				$("#createSchModal").modal("hide"); 
			
			},
			error : function(xhr, status, error){
			 Swal.fire({
			    	title: '일정 삭제 실패!',
			    	text: '재시도 해주세요.',
			    	icon: 'error',
			    	confirmButtonColor: '#0ABAB5',
			    	confirmButtonText: '확인',
				})
				$("#createSchModal").modal("hide"); 
			}
			
		});
	}
	
	// 종일 여부 체크하면 시간 선택 막기
	$('input[type=radio][name=allDay]').change(function(){
	    let isAllday = $(this).val(); // '예'면 true, '아니오'면 false
	    console.log(isAllday);
		
		// '예' 체크됐으면 시간 선택 막기
		if(isAllday === 'true'){
			$("select[name='time-set']").prop('disabled',true);
			$("#start").val('09:00');
			$("#end").val('19:00');
			$("select[name='time-set']").attr('style',"background-color: #ddd");
		}else{
			$("select[name='time-set']").prop('disabled',false);
			$("#start").val('09:00');
			$("#end").val('09:30');
		}
	    
	});
	
	// AJAX 요청 보낼 때 종일 값 보내기
	//$("select[name=태그명]").attr("disabled", false);
	
	
	
	
</script>